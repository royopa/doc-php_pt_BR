<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 288721 Maintainer: narigone Status: ready -->
<appendix xml:id="userlandnaming" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Guia de nomenclatura em espaço de usuário</title>
 <para>
  O seguinte guia tem como objetivo orientar em como escolher nome para identificadores
  em código PHP em espaço de usuário. Quando escolher nome para qualquer código que crie símbolos
  no escopo global, é importante levar em conta as seguintes 
  orientações para previnir que futuras versões do PHP entrem em conflito
  com o seus símbolos.
 </para>

 <section xml:id="userlandnaming.globalnamespace">
  <title>Escopo Global</title>
  <para>
   Aqui está uma visão geral de artefatos de código que acabam no escopo global:
  </para>

  <itemizedlist>
   <listitem><para>funções</para></listitem>
   <listitem><para>classes</para></listitem>
   <listitem><para>interfaces</para></listitem>
   <listitem><para>constantes (menos constantes de classes)</para></listitem>
   <listitem>
    <para>variáveis definidas fora de funções e métodos</para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.rules">
  <title>Regras</title>
  <para>
   A lista a seguir dá uma visão geral de quais direitos o projeto do PHP
   reserva para si, quando escolhendo nomes para novos identificadores internos.
   O guia definitivo é 
   <link xlink:href="&url.userlandnaming.cs;">padrão de código</link> oficial:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     PHP detém o escopo de alto nível, mas tenta achar nomes descritivos
     decentes e evita qualquer conflito óbvio.
    </para>
   </listitem>
   <listitem>
    <para>
     Nomes de funções usam sublinhado (_) entre palavas, enquanto nomes de classe usam
     a notação camel case (por exemplo NomeDeClasse). Existem algumas exceções para
     classes e funções mais antigas.
    </para>
   </listitem>
   <listitem>
    <para>
     O PHP prefixará quaisquer símbolos globais de uma extensão com o nome da
     extensão (No passado, existiam várias exceções
     à essa regra). Exemplos:
    </para>

    <itemizedlist>
     <listitem><para><function>curl_close</function></para></listitem>
     <listitem><para><function>mysql_query</function></para></listitem>
     <listitem><para>PREG_SPLIT_DELIM_CAPTURE</para></listitem>
     <listitem><para>new DOMDocument()</para></listitem>
     <listitem>
      <para>
       <function>strpos</function> (exemplo de um erro do passado)
      </para>
     </listitem>
     <listitem><para>new SplFileObject()</para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Iterators e Exceptions são, no entanto, simplesmente sufixados com
     "<literal>Iterator</literal>" e "<literal>Exception</literal>."
     Exemplos:
    </para>
    <itemizedlist>
     <listitem><para><classname>ArrayIterator</classname></para></listitem>
     <listitem><para><classname>LogicException</classname></para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     O PHP reserva todos os símbolos começando com <literal>__</literal>
     como mágicos. É recomendado que você não crie símbolos começando com
     <literal>__</literal> a não ser que
     você queira usar a funcionalidade mágica documentada. Exemplos:
    </para>
    <itemizedlist>
     <listitem><para><function>__get</function></para></listitem>
     <listitem><para><function>__autoload</function></para></listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.tips">
  <title>Dicas</title>
  <para>
   Para escrever código que não sofrerá problemas no futuro, é recomendado prefixar
   (ou sufixar) qualquer coisa que vá para o escopo global que um prefixo incomum
   de 3 a 4 letras, separados por um sublinhado (_), É 
   recomendado que, para evitar conflitos com outros códigos existentes, o 
   projeto pesquise prefixos existentes (ou sufixos) usados em outros projetos
   e anuciem o prefixo (ou sufixo) escolhido adequadamente.
   Exemplos:
  </para>

  <itemizedlist>
   <listitem><para>MyPx_someFunc()</para></listitem>
   <listitem><para>Foo_Date</para></listitem>
   <listitem><para>$asdf_dbh</para></listitem>
  </itemizedlist>
 </section>

</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

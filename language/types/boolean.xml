<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: felipe Status: ready -->
<sect1 xml:id="language.types.boolean">
 <title>Booleanos</title>
 
  <simpara>
   Este é o tipo mais simples. Um <type>booleano</type> expressa um
   valor verdade. Ele pode ser &true; ou &false;.
  </simpara>

  <note>
   <simpara>
    O tipo booleano foi introduzido no PHP 4.
   </simpara>
  </note>

  <sect2 xml:id="language.types.boolean.syntax">
   <title>Sintaxe</title>
   <para>
    Para especificar um literal booleano, use as palavras-chave &true;
    ou &false;. Ambas são case-insensitive.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$foo = True; // atribui o valor True para $foo
?>
]]>
       </programlisting>
      </informalexample>
     </para>
     <para>
      Tipicamente você pode
      utilizar algum tipo de <link linkend="language.operators">operador</link>
      que retorne um valor <type>booleano</type>, e passá-lo para
      uma <link linkend="language.control-structures">estrutura de
      controle</link>.
      <informalexample>
       <programlisting role="php">
<![CDATA[
<?php
// == É um operador que testa
// igualdade e retorna um booleano.
if ($action == "mostrar_versao") {
    echo "A versão é 1.23";
}

// isto não é necessário ...
if ($exibir_separadores == TRUE) {
    echo "<hr>\n";
}

// ... porque você pode simplesmente escrever isso:
if ($exibir_separadores) {
    echo "<hr>\n";
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect2>

  <sect2 xml:id="language.types.boolean.casting">
   <title>Convertendo para booleano</title>
    <simpara>
     Para converter explicitamente um valor para <type>booleano</type>, utilize-se dos
     modificadores <literal>(bool)</literal> ou <literal>(boolean)</literal>.
     Entretanto, na maioria dos casos, você não precisa utilizar o modificador, desde que qualquer valor
     será convertido automaticamente se um operador, função ou
     estrutura de controle requerer um argumento <type>booleano</type>.
    </simpara>
    <simpara>
     Veja também <link linkend="language.types.type-juggling">Manipulação de tipos</link>.
    </simpara>

    <para>
     Ao converter para <type>booleano</type>, os seguintes valores
     são considerados &false;:

     <itemizedlist>
      <listitem>
       <simpara>o próprio <link linkend="language.types.boolean">booleano</link>
        &false;</simpara>
      </listitem>
      <listitem>
       <simpara>o <link linkend="language.types.integer">inteiro</link
       > 0 (zero) </simpara>
      </listitem>
      <listitem>
       <simpara>o <link linkend="language.types.float">ponto flutuante</link>
       0.0 (zero) </simpara>
      </listitem>
      <listitem>
       <simpara>uma <link linkend="language.types.string"
         >string</link> vazia e a <link linkend="language.types.string"
         >string</link>
         "0"</simpara>
      </listitem>
      <listitem>
       <simpara>um <link linkend="language.types.array">array</link>
       sem elementos</simpara>
      </listitem>
      <listitem>
       <simpara>um <link linkend="language.types.object">objeto</link>
       sem elementos membros (somente PHP 4)</simpara>
      </listitem>
      <listitem>
       <simpara>o tipo especial <link linkend="language.types.null"
         >NULL</link> (incluindo variáveis não definidas)
       </simpara>
      </listitem>
      <listitem>
       <simpara>o objeto <link linkend="ref.simplexml">SimpleXML</link>
       criado de tags vazias
       </simpara>
      </listitem>
     </itemizedlist>

     Qualquer outro valor é considerado &true; (incluindo qualquer
     <link linkend="language.types.resource">recurso</link>).
     <warning>
      <simpara>
       <literal>-1</literal> é considerado
       &true;, como qualquer valor não zero (negativos
       ou positivos)!
      </simpara>
     </warning>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
var_dump((bool) "");        // bool(false)
var_dump((bool) 1);         // bool(true)
var_dump((bool) -2);        // bool(true)
var_dump((bool) "foo");     // bool(true)
var_dump((bool) 2.3e5);     // bool(true)
var_dump((bool) array(12)); // bool(true)
var_dump((bool) array());   // bool(false)
var_dump((bool) "false");   // bool(true)
?>
]]>
      </programlisting>
     </informalexample>
    </para>
   </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

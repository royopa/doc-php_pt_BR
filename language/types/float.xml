<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 329281 Maintainer: ae Status: ready Credits: felipe -->
<sect1 xml:id="language.types.float" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Números de ponto flutuante</title>

 <para>
  Números de ponto flutuante (também conhecidos como "floats", "doubles" ou "números reais") podem ser
  especificados utilizando qualquer uma das seguintes sintaxes:
 </para>
 
 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$a = 1.234; 
$b = 1.2e3; 
$c = 7E-10;
?>
]]>
  </programlisting>
 </informalexample>
 
 <para>
  Formalmente:
 </para>
 
 <informalexample>
  <programlisting>
<![CDATA[
LNUM          [0-9]+
DNUM          ([0-9]*[\.]{LNUM}) | ({LNUM}[\.][0-9]*)
EXPONENT_DNUM [+-]?(({LNUM} | {DNUM}) [eE][+-]? {LNUM})
]]>
  </programlisting>
 </informalexample>

 <para>
  O tamanho de um número de ponto flutuante é dependente de plataforma,
  sendo o máximo de ~1.8e308 com uma precisão de 14
  dígitos decimais um valor comum (número de 64 bits no formato IEEE).
 </para>

 <warning xml:id="warn.float-precision">
  <title>Precisão de números de ponto flutuante</title>

  <para>
   Números de ponto flutuante tem precisão limitada. Embora dependa do sitema,
   o PHP geralmente utiliza o sistema de precisão dupla do IEEE 754, que
   terá uma precisão máxima devida a arredondamentos da ordem de 1.11e-16.
   Operações mátemáticas incomuns poderão incorrer em erros maiores, fora que
   a propagação de erros precisa ser considerada quando várias operações
   forem realizadas.
  </para>
  
  <para>
   Além disso, números racionais que tem representação exata em números
   em base 10, como <literal>0.1</literal> ou
   <literal>0.7</literal>, não possuem representação exata em ponto flutuante
   na base 2 (o formato utilizado internamente), não importanto o tamanho
   da mantissa. Portanto não existe conversão para o formato interno sem
   uma pequena perda de precisão. Isso pode ocasionar resultados
   confusos: por exemplo, <literal>floor((0.1+0.7)*10)</literal> normalmente
   retornará <literal>7</literal>, em vez do resultado esperado <literal>8</literal>,
   porque a representação interna final será algo como
   <literal>7.9999999999999991118...</literal>.
  </para>
  
  <para>
   Então, nunca confie em resultados com números de ponto flutuante até a última casa e
   nunca compare números de ponto flutuante em igualdades. Se você realmente
   precisar de alta precisão, você pode utilizar as <link linkend="ref.bc">funções matemáticas de precisão arbitrária</link>
   ou as funções relacionadas ao <link linkend="ref.gmp">gmp</link>.
  </para>

  <para>
   Para uma explicação "simples" dessa questão, veja <link xlink:href="&url.floating.point.guide;">o guia sobre ponto flutuante</link>,
   que também tem o título alternativo de "Porque meus números não somam direito?".
  </para>
 </warning>

 <sect2 xml:id="language.types.float.casting">
  <title>Convertendo para float</title>

  <para>
   Para informações sobre a conversão de strings para floats,
   veja a seção entitulada <link linkend="language.types.string.conversion">Conversão de
   Strings para números</link>. Para valores de outros tipos, o valor é primeiro
   convertido para <type>inteiro</type> e então para
   <type>float</type>. Veja a seção
   <link linkend="language.types.integer.casting">Convertendo
   para inteiros</link> para mais informações. No PHP 5, um aviso é emitido se você tentar converter um
   <type>object</type> para um <type>float</type>.
  </para>

 </sect2>

 <sect2 xml:id="language.types.float.comparison">
  <title>Comparando floats</title>

  <para>
   Como notado acima, testar números de ponto flutuante com igualdade é
   probelmático, por causa da maneira como são armazenados internamente. Entretanto
   existem maneiras de fazer comparações com números de ponto flutuante que
   contornam essas limitações.
  </para>

  <para>
   Para testar números de ponto flutuante, utilize um "valor de erro máximo"
   na comparação utilizada. Esse valor é também chamado de epsilon,
   ou erro de unidade, e deve ser a diferença máxima aceitável no resultado dos cálculos.
  </para>
  
  <informalexample>
   <simpara>
    <varname>$a</varname> and <varname>$b</varname> serão considerados iguais
    até o 5º dígito de precisão.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1.23456789;
$b = 1.23456780;
$epsilon = 0.00001;

if(abs($a-$b) < $epsilon) {
    echo "iguais";
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="language.types.float.nan">
  <title>NaN</title>
  <para>
   Algumas operações numéricas podem resultar em valores representados pela constante
   <constant>NAN</constant>. Esse resultado representa um valor indefinido
   ou não representável nos cálculos de ponto flutuante. Qualquer
   comparação deste valor com qualquer outro, inclusive ele mesmo, terá
   como resultado &false;.
  </para>
  <para>
   Como o <constant>NAN</constant> representa um resultado irrepresentável,
   <constant>NAN</constant> não deve ser comparado com outros valores, incluindo
   si mesmo, o correto sendo a utilização da função <function>is_nan</function>.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

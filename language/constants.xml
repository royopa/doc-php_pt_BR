<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 318176 Maintainer: felipe Status: ready --><!-- CREDITS: ae, thiago -->
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Constantes</title>

  <simpara>
   Uma constante é um identificador (nome) para um único valor. Como o nome
   sugere, esse valor não pode mudar durante a execução do
   script (exceção às <link linkend="language.constants.predefined">
   constantes mágicas</link>, que não são constantes de verdade).
   As constantes são "Case Sensitive" (Sensível ao tamanho de letras) por padrão. Por convenção,
   o nomes de constantes são sempre em maiúsculas.
  </simpara>
  <para>
   O nome de uma constante tem as mesmas regras de qualquer identificador no PHP. Um
   nome de constante válida começa com uma letra ou sublinhado, seguido
   por qualquer número de letras, números ou sublinhados. Em expressões
   regulares, ela pode ser representada por:
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
   &tip.userlandnaming;
  <para>
   <example>
    <title>Nomes de constantes válidos e inválidos</title>
    <programlisting role="php">
<![CDATA[
<?php

// Nomes de constantes válidos
define("FOO",     "alguma coisa");
define("FOO2",    "alguma outra coisa");
define("FOO_BAR", "alguma coisa mais");

// Nomes de constantes inválidas
define("2FOO",    "alguma coisa");

// Isto é válido, mas deve ser evitado:
// O PHP pode vir a fornercer uma constante mágica
// que danificará seu script
define("__FOO__", "alguma coisa");

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    Para nossos exemplos, uma letra é a-z, A-Z e os caracteres ASCII
    do 127 ao 255 (0x7f-0xff).
   </simpara>
  </note>

  <simpara>
   Como as &link.superglobals;, o escopo de uma constante é global. Você
   pode acessar constantes de qualquer lugar em seu script sem se preocupar 
   com o escopo. Para mais informações sobre o escopo no PHP, leia a seção 
   do manual <link linkend="language.variables.scope">escopo de variáveis</link>.
  </simpara>

  <sect1 xml:id="language.constants.syntax">
   <title>Sintaxe</title>
   <simpara>
    Você pode definir uma constante utilizando-se da função
    <function>define</function>, ou utilizando a palavra-chave <literal>const</literal>
    fora da definição de uma classe a partir dor PHP 5.3.0. Quando uma constante 
    é definida, ela nunca mais poderá ser modificada ou anulada.
   </simpara>
   <simpara>
    Somente dados escalares (<type>boolean</type>, <type>integer</type>,
    <type>float</type> e <type>string</type>) podem ser colocados
    em constantes. É possível ter consntantes com um <type>resource</type> 
    (recurso), mas deve ser evitado já que pode causar resultados não 
    esperados.
   </simpara>
   <simpara>
    Você pode obter o valor de uma constante simplesmente especificando seu nome.
    Diferentemente de variáveis, você <emphasis>não</emphasis> prefixa uma 
    constante com um sinal de <literal>$</literal>.
    Você também pode utilizar a função <function>constant</function> para
    ler o valor de uma constante, se você precisar obter seu valor
    dinamicamente.
    Utilize <function>get_defined_constants</function> para obter a lista de
    todas as constantes definidas.
   </simpara>
   <note>
    <simpara>
     As constantes e variáveis (globais) estão em espaços de nomes diferentes.
     Isto implica, por exemplo, que &true; e
     <varname>$TRUE</varname> são geralmente diferentes.
    </simpara>
   </note>
   <simpara>
    Se você usar uma constante indefinida, o PHP assume o nome
    da constante como seu próprio valor, como se você tivesse
    uma <type>string</type> (CONSTANT vs "CONSTANT"). Um erro de nível
    <link linkend="ref.errorfunc">E_NOTICE</link> será lançado
    quando isso acontecer. Veja também a referência do manual sobre como
    <link linkend="language.types.array.foo-bar">$foo[bar]</link> é
    errado (a não ser que você primeiro <function>define</function>
    <literal>bar</literal> como uma constante). Se você simplesmente quer 
    checar se uma constante foi definida, utilize a função 
    <function>defined</function>.
   </simpara>
   <para>
    Estas são as diferenças entre constantes e variáveis:
    <itemizedlist>
     <listitem>
      <simpara>
       Constantes não podem ter um sinal de cifrão (<literal>$</literal>)
       antes delas;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Constantes só podem ser definidas utilizando a função
       <function>define</function>, e não por simples assimilação;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Constantes podem ser definidas e acessadas de qualquer lugar sem
       que a regras de escopo de variáveis seja aplicadas;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Constantes não podem ser redefinidas ou eliminadas depois que
       elas são criadas; e
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Constantes só devem conter valores escalares.
       </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <example>
     <title>Definindo Constantes</title>
     <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // imprime "Hello world."
echo Constant; // imprime "Constant" e gera um alerta notice.
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    <example>
     <title>Definindo Constantes usando a palavra-chave <literal>const</literal></title>
     <programlisting role="php">
<![CDATA[
<?php
// Funciona a partir do PHP 5.3.0
const CONSTANT = 'Hello World';

echo CONSTANT;
?>
]]>
     </programlisting>
    </example>
   </para>

   <note>
    <para>
     Ao contrário das funções definidas através de <function>define</function>,
     as constantes definidas usando a palavra-chave <literal>const</literal> 
     devem ser declarados no escopo de topo (principal) pois são definidas no
     tempo de compilação. Isso significa que elas não podem ser definidas 
     dentro de funções, laços ou <literal>if</literal>s.
    </para>
   </note>
   
   <simpara>
    Veja também <link linkend="language.oop5.constants">Constantes de Classe</link>.
   </simpara>
  </sect1>

  <sect1 xml:id="language.constants.predefined">
   <title>Constantes Mágicas</title>

   <simpara>
    O PHP fornece um grande número de <link
    linkend="reserved.constants">consntantes predefinidas</link> para qualquer 
    script que ele execute. A maioria dessas constantes, entretanto, são 
    criadas por várias extensões, e somente estarão presentes quando essas 
    extensões estiverem disponíveis, tanto por carregamento dinâmico quanto por 
    compilação direta.
   </simpara>

   <para>
    Há sete constantes "mágicas", que mudam dependendo de
    onde elas são utilizadas. Por exemplo, o valor de
    <constant>__LINE__</constant> depende do número da linha em que é
    utilizada em seu script. Essas constantes especiais são
    insensíveis a maiúsculas e minúsculas (case insensitive):
   </para>
   <para>
    <table>
     <title>Algumas constantes "mágicas" do PHP</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Nome</entry>
        <entry>Descrição</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><constant>__LINE__</constant></entry>
        <entry>
         A linha atual do script.
        </entry>
       </row>
       <row>
        <entry><constant>__FILE__</constant></entry>
        <entry>
         O caminho completo e nome do arquivo. Se utilizado dentro de um include,
         o nome do arquivo incluído será retornado.
         Desde o PHP 4.0.2, <constant>__FILE__</constant> sempre contém um
         caminho absoluto com links simbólicos resolvidos enquanto em versões antigas 
         ela continha um caminho relativo sob certas circunstâncias.
        </entry>
       </row>
       <row>
        <entry><constant>__DIR__</constant></entry>
        <entry>
         O diretório do arquivo. Se usado dentro de um include,
         o diretório do arquivo incluído é retornado. Isto é equivalente
         a <literal>dirname(__FILE__)</literal>. Este nome do diretório
         não possui barra no final, a não ser que seja o diretório raiz.
         (Adicionado no PHP 5.3.0.)
        </entry>
       </row>
       <row>
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         O nome da função (Acrescentado no PHP 4.3.0). A partir do PHP 5 esta 
         constante retorna o nome da função como ela foi declarada (sensível a 
         maiúsculas e minúsculas). No PHP 4 sempre retorna o nome em minúsculas.
        </entry>
       </row>
       <row>
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         O nome da classe (Adicionado no PHP 4.3.0). A partir do PHP 5 esta 
         constante retorna o nome da função como ela foi declarada (sensível a 
         maiúsculas e minúsculas). No PHP 4 sempre retorna o nome em minúsculas.
         O nome da classe inclui o namespace em que foi declarado (ex: 
         <literal>Foo\Bar</literal>). Note que a partir do PHP 5.4, __CLASS__ 
         funciona também em traits. Quando utilizada em um método trait, __CLASS__ é
         o nome da classe do trait em que foi utilizada.
        </entry>
       </row>
       <row>
        <entry><constant>__TRAIT__</constant></entry>
        <entry>
         O nome do trait. (Adicionado no PHP 5.4.0) A partir do PHP 5.4 essa
         constante retorna o trait em que fo delcarado (sensível a maiúsculas e 
         minúsculas). O nome do trait incluir o namespace em que foi declarado
         (ex: <literal>Foo\Bar</literal>).
        </entry>
       </row>
       <row>
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         O nome do método de classe. (Adicionado no PHP 5.0.0). O nome do método é
         retornado como foi declarado (sensível a maiúsculas e minúsculas).
        </entry>
       </row>
       <row>
        <entry><constant>__NAMESPACE__</constant></entry>
        <entry>
         O nome do namespace atual (sensível a maiúsculas e minúsculas). Esta 
         constante é definida em tempo de compilação (Adicionada no PHP 5.3.0).
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Veja também
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

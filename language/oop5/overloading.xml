<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 322134 Maintainer: ae Status: ready --><!-- CREDITS: narigone,amandavale -->
 <sect1 xml:id="language.oop5.overloading" xmlns="http://docbook.org/ns/docbook">
  <title>Sobrecarga</title>

  <para>
   Sobrecarga em PHP provê recursos para <quote>criar</quote>
   dinamicamente membros e métodos.
   Estas entidades dinâmicas são processadas via métodos mágicos que podem
   estabelecer em uma classe para vários tipos de ações.
  </para>

  <para>
   Os métodos sobrecarregados são invocados quando interagem com membros ou
   métodos que não foram declarados ou não são
   <link linkend="language.oop5.visibility">visíveis</link> no escopo
   corrente. O resto desta seção usará os termos
   <quote>membros inacessíveis</quote> e <quote>métodos inacessíveis</quote>
   para se referirir a esta combinação de declaração e visibilidade.
   
  </para>

  <para>
   Todos os métodos sobrecarregados devem ser definidos como <literal>públicos</literal>.
  </para>

  <note>
   <para>
    Nenhum dos argumentos destes métodos mágicos podem ser 
    <link linkend="functions.arguments.by-reference">passados por
    referência</link>.
   </para>
  </note>

  <note>
   <para>
    A interpretação do PHP de <quote>sobrecarga</quote> é diferente da
    maioria das linguagens orientadas a objeto. Sobrecarga tradicionalmente
    provê a habilidade de ter múltiplos métodos com o mesmo nome, mas
    diferentes quantidades e tipos de
    argumentos.
   </para>
  </note>


  <sect2 xml:id="language.oop5.overloading.changelog">
   &reftitle.changelog;
   <para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Version;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>5.3.0</entry>
        <entry>
         Adicionado <link linkend="object.callstatic">__callStatic()</link>.
         Adicionado warning para reforçar a visibilidade pública e a declaração não estática.
        </entry>
       </row>
       <row>
        <entry>5.1.0</entry>
        <entry>
         Adicionados <link linkend="object.isset">__isset()</link> e <link linkend="object.unset">__unset()</link>.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
  </sect2>


  <sect2 xml:id="language.oop5.overloading.members">
   <title>Sobrecarga de membros</title>

   <methodsynopsis xml:id="object.set">
    <modifier>public</modifier> <type>void</type><methodname>__set</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis xml:id="object.get">
    <modifier>public</modifier> <type>mixed</type><methodname>__get</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis xml:id="object.isset">
    <modifier>public</modifier> <type>bool</type><methodname>__isset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis xml:id="object.unset">
    <modifier>public</modifier> <type>void</type><methodname>__unset</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
   </methodsynopsis>

   <para>
    <link linkend="object.set">__set()</link> é executado ao se escrever dados para membros
    inacessíveis.
   </para>

   <para>
    <link linkend="object.get">__get()</link> é utilizados para ler dados de membros
    inacessíveis.
   </para>

   <para>
    <link linkend="object.isset">__isset()</link> é disparado para chamar
    <function>isset</function> ou <function>empty</function>
    em membros inacessíveis.
   </para>

   <para>
    <link linkend="object.unset">__unset()</link> é invocado quando
    <function>unset</function> é usado em membros inacessíveis.
   </para>

   <para>
    O argumento <varname>$name</varname> é o nome do membro com o qual se está
    interagindo. O argumento <varname>$value</varname> do método <link linkend="object.set">__set()</link>
    especifica o valor para o qual o membro <varname>$name</varname> deveria
    ser setado.
   </para>

   <para>
    Sobrecarga de membros somente trabalha no contexto de objetos. Estes
    métodos mágicos não serão disparados no contexto estático. Portanto estes
    métodos não podem ser declarados <link
     linkend="language.oop5.static">static</link>. A partir do PHP
     5.3.0, um warning é emitido se algum método mágico sobrecarregado
     é declarado como <literal>static</literal>.
   </para>

    <note>
    <para>
     O valor de retorno de <link linkend="object.set">__set()</link> é ignorado
     por causa da forma que o PHP processa o operador de assimilação.
     Da mesma forma, <link linkend="object.get">__get()</link> nunca é chamado quando
     encadeando assimilações como essa:
     <literal><![CDATA[ $a = $obj->b = 8; ]]></literal>
    </para>
   </note>

   <note>
    <para>
     Não é possível utilizar propriedades sobrecarregadas em outros
     constructos de linguagem além de <function>isset</function>. Isto
     significa que se <function>empty</function> é chamado em uma propriedade
     sobrecarregada, o método sobrecarregado não é chamado.
    </para>
    <para>
     Para contornar essa limitação, a propriedade sobrecarregada precisa
     ser copiada em uma variável local dentro do escopo e então
     ser manipulada por <function>empty</function>.
    </para>
   </note>
   
   <example>
    <title>
     Sobrecarregando propriedades via <link linkend="object.get">__get()</link>,
     <link linkend="object.set">__set()</link>, <link linkend="object.isset">__isset()</link>
     and <link linkend="object.unset">__unset()</link>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
class PropertyTest
{
    /**  Location for overloaded data.  */
    private $data = array();

    /**  Overloading not used on declared properties.  */
    public $declared = 1;

    /**  Overloading only used on this when accessed outside the class.  */
    private $hidden = 2;

    public function __set($name, $value)
    {
        echo "Setting '$name' to '$value'\n";
        $this->data[$name] = $value;
    }

    public function __get($name)
    {
        echo "Getting '$name'\n";
        if (array_key_exists($name, $this->data)) {
            return $this->data[$name];
        }

        $trace = debug_backtrace();
        trigger_error(
            'Undefined property via __get(): ' . $name .
            ' in ' . $trace[0]['file'] .
            ' on line ' . $trace[0]['line'],
            E_USER_NOTICE);
        return null;
    }

    /**  As of PHP 5.1.0  */
    public function __isset($name)
    {
        echo "Is '$name' set?\n";
        return isset($this->data[$name]);
    }

    /**  As of PHP 5.1.0  */
    public function __unset($name)
    {
        echo "Unsetting '$name'\n";
        unset($this->data[$name]);
    }

    /**  Not a magic method, just here for example.  */
    public function getHidden()
    {
        return $this->hidden;
    }
}


echo "<pre>\n";

$obj = new PropertyTest;

$obj->a = 1;
echo $obj->a . "\n\n";

var_dump(isset($obj->a));
unset($obj->a);
var_dump(isset($obj->a));
echo "\n";

echo $obj->declared . "\n\n";

echo "Let's experiment with the private property named 'hidden':\n";
echo "Privates are visible inside the class, so __get() not used...\n";
echo $obj->getHidden() . "\n";
echo "Privates not visible outside of class, so __get() is used...\n";
echo $obj->hidden . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Setting 'a' to '1'
Getting 'a'
1

Is 'a' set?
bool(true)
Unsetting 'a'
Is 'a' set?
bool(false)

1

Let's experiment with the private property named 'hidden':
Privates are visible inside the class, so __get() not used...
2
Privates not visible outside of class, so __get() is used...
Getting 'hidden'


Notice:  Undefined property via __get(): hidden in <file> on line 70 in <file> on line 29

]]>
    </screen>

   </example>
  </sect2>

  <sect2 xml:id="language.oop5.overloading.methods">
   <title>Sobrecarga de método</title>

   <methodsynopsis xml:id="object.call">
    <modifier>public</modifier> <type>mixed</type><methodname>__call</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis xml:id="object.callstatic">
    <modifier>public static</modifier> <type>mixed</type><methodname>__callStatic</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>

   <para>
    <link linkend="object.call">__call()</link> é disparado quando invocando métodos
    inacessíveis em um contexto de objeto.
   </para>

   <para>
    <link linkend="object.callstatic">__callStatic()</link> é disparado quando invocando métodos
    inacessíveis em um contexto estático.
   </para>

   <para>
    O argumento <varname>$name</varname> é o nome do método sendo chamado. O
    argumento <varname>$arguments</varname> é um array enumerado contendo os
    parâmetros passados para o método <varname>$name</varname>.
    
   </para>

   <example>
    <title>
     Sobrecarga de métodos instanciados com  <link linkend="object.call">__call()</link>
     e <link linkend="object.callstatic">__callStatic()</link>
    </title>
    <programlisting role="php">
  <![CDATA[
<?php
class MethodTest
{
    public function __call($name, $arguments)
    {
        // Note: value of $name is case sensitive.
        echo "Calling object method '$name' "
             . implode(', ', $arguments). "\n";
    }

    /**  As of PHP 5.3.0  */
    public static function __callStatic($name, $arguments)
    {
        // Note: value of $name is case sensitive.
        echo "Calling static method '$name' "
             . implode(', ', $arguments). "\n";
    }
}

$obj = new MethodTest;
$obj->runTest('in object context');

MethodTest::runTest('in static context');  // As of PHP 5.3.0
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Calling object method 'runTest' in object context
Calling static method 'runTest' in static context
]]>
    </screen>
   </example>

  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

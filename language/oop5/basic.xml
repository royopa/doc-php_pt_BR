<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: narigone Status: ready -->
<!-- CREDITS: amandavale -->

 <sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
  <title>O Básico</title>

  <sect2 xml:id="language.oop5.basic.class">
   <title>Classe</title>
   <para>
    Toda definição de classe começa com a palavra-chave class, seguido por um nome
    da classe, que pode ser qualquer nome que não seja uma palavra <link linkend="reserved">
    reservada</link> no PHP, seguido por um par de chaves, que
    contém a definição dos membros e métodos da classe. Uma
    pseudo variável, <varname>$this</varname>, está disponível quando um método é
    chamado dentro de um contexto de objeto. <varname>$this</varname> é uma referência
    para o objeto chamador do método (normalmente o objeto ao qual o método
    pertence, mas pode ser outro objeto, se o método é chamado
    <link linkend="language.oop5.static">estaticamente</link> no contexto
    de um objeto secundário). Isso é ilustrado no exemplo a seguir:
    <example>
     <title>Variável <varname>$this</varname> em linguagens com orientação a objetos</title>
     <programlisting role="php">
<![CDATA[
<?php
class A
{
    function foo()
    {
        if (isset($this)) {
            echo '$this está definida (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "\$this não está definida.\n";
        }
    }
}

class B
{
    function bar()
    {
        A::foo();
    }
}

$a = new A();
$a->foo();
A::foo();
$b = new B();
$b->bar();
B::bar();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
$this está definida (A)
$this não está definida.
$this está definida (B)
$this não está definida.
]]>
     </screen>
    </example>
   </para>
   <example>
    <title>Definição de SimpleClass</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // declaração de membro
    public $var = 'um valor padrão';

    // declaração de método
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
    </programlisting>
   </example>

   <para>
    O valor padrão deve ser uma expressão constante, não (por exemplo) uma
    variável, um membro da classe ou uma chamada de função.
    <example>
     <title>Valor padrão de membros da classe</title>
     <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // declarações de membro inválidas
    public $var1 = 'olá '.'mundo';
    public $var2 = <<<EOD
olá mundo
EOD;
    public $var3 = 1+2;
    public $var4 = self::myStaticMethod();
    public $var5 = $myVar;

    // declarações de membro válidas
    public $var6 = myConstant;
    public $var7 = self::classConstant;
    public $var8 = array(true, false);


}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
    Existem algumas funções legais para lidar com classes e objetos. É bom dar uma
    olhada nas <link linkend="ref.classobj">funções de
    Classe/Objeto</link>.
    </para>
   </note>

   <para>
    Diferente de heredocs, nowdocs pode ser usado no contexto de dado estático.
    <example>
     <title>Exemplo com dado estático</title>
     <programlisting role="php">
<![CDATA[
<?php
class foo {
    // A partir do PHP 5.3.0
    public $bar = <<<'EOT'
bar
EOT;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Suporte a Nowdoc foi adicionado no PHP 5.3.0.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.basic.new">
   <title>new</title>
   <para>
    Para criar uma instância de uma classe, um novo objeto deve ser criado e
    atribuído a uma variável. Um objeto sempre será atribuído quando
    for criado um novo objeto, a não ser que o objeto tenha um
    <link linkend="language.oop5.decon">construtor</link> definido que dispare uma
    <link linkend="language.exceptions">exceção</link> por um erro. Classes
    devem ser definidas antes de serem instanciadas (e em alguns casos isso é um
    requerimento).
   </para>
   <example>
    <title>Criando uma instância</title>
    <programlisting role="php">
<![CDATA[
<?php
$instance = new SimpleClass();
?>
]]>
    </programlisting>
   </example>
   <para>
    No contexto da classe, é possível criar um novo objeto por
    <literal>new self</literal> and <literal>new parent</literal>.
   </para>
   <para>
    Quando atribuir uma instância já criada de um objeto a uma variável nova,
    a variável nova irá acessar a mesma instância do objeto que foi atribuído. Esse
    comportamento se mantém quando passando instâncias a uma função. Uma nova instância
    de um objeto já criado pode ser feita
    <link linkend="language.oop5.cloning">clonando</link> o mesmo.
   </para>
   <example>
    <title>Atribuição de Objetos</title>
    <programlisting role="php">
<![CDATA[
<?php
$assigned   =  $instance;
$reference  =& $instance;

$instance->var = '$assigned terá esse valor';

$instance = null; // $instance e $reference tornam-se nulos

var_dump($instance);
var_dump($reference);
var_dump($assigned);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$assigned terá esse valor"
}
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.extends">
   <title>extends</title>
   <para>
    Uma classe pode herdar métodos e membros de outra classe usando a
    palavra-chave extends na sua declaração. Não é possível herdar classes
    múltiplas, uma classe só pode herdar uma classe base.
   </para>
   <para>
    Os métodos e membros herdados podem ser sobrescritos, a não ser que a classe
    pai definiu um método como <link linkend="language.oop5.final">final</link>,
    redeclarando eles com o mesmo nome definido na classe pai.
    É possível acessar os métodos sobrescritos ou membros estáticos
    referenciado-os com <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>
  </para>
   <example>
    <title>Herança da Classe Simples</title>
    <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
    // Redefine o método pai
    function displayVar()
    {
        echo "Classe Herdeira\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Classe Herdeira
um valor padrão
]]>
    </screen>
   </example>
  </sect2>
  <sect2 xml:id="language.oop5.basic.class.class">
   <title>::class</title>

   <para>
    Since PHP 5.5, the <literal>class</literal> keyword is also used for class
    name resolution. You can get a string containing the fully qualified name
    of the <literal>ClassName</literal> class by using
    <literal>ClassName::class</literal>. This is particularly useful with
    <link linkend="language.namespaces">namespaced</link> classes.
   </para>
   <para>
    <example xml:id="language.oop5.basic.class.class.name">
     <title>Class name resolution</title>
     <programlisting role="php">
<![CDATA[
<?php
namespace NS {
    class ClassName {
    }
    
    echo ClassName::class;
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
NS\ClassName
]]>
     </screen>
    </example>
   </para>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 316911 Maintainer: narigone Status: ready -->
 <sect1 xml:id="language.oop5.abstract" xmlns="http://docbook.org/ns/docbook">
  <title>Abstração de Classes</title>

  <para>
   PHP 5 introduz métodos e classes abstratos. Não é permitido criar
   uma instância de uma classe que foi definida como abstrata e qualquer classe que
   contenha pelo menos um método abstrato deve também ser abstrata. Métodos
   definidos como abstratos simplesmente declaram a assinatura do método,
   eles não podem definir a implementação.
  </para>

  <para>
   Quando uma classe herda uma classe abstrata, todos os métodos marcados como abstratos
   na declaração da classe pai devem ser definidos na classe filha; além disso,
   esses métodos devem ser definidos com a mesma (ou menos restrita)
   <link linkend="language.oop5.visibility">visibilidade</link>. Por exemplo,
   se um método abstrato é definido como protected, a implementação
   da função deve ser definida ou como protected ou public, mas não private. Além disso,
   as assinaturas dos métodos devem coincidir, ou seja, as induções de tipos e o número
   de argumentos requeridos devem ser os mesmos. Isto também se aplica aos construtores
   a partir do PHP 5.4. Antes do 5.4 as assinaturas dos construtores poderiam ser diferentes.
  </para>

  <example>
   <title>Exemplo de classe abstrata</title>
    <programlisting role="php">
<![CDATA[
<?php
abstract class ClasseAbstrata
{
    // Força a classe que estende ClasseAbstrata a definir esse método
    abstract protected function pegarValor();
    abstract protected function valorComPrefixo( $prefixo );

    // Método comum
    public function imprimir() {
        print $this->pegarValor();
    }
}

class ClasseConcreta1 extends ClasseAbstrata
{
    protected function pegarValor() {
        return "ClasseConcreta1";
    }

    public function valorComPrefixo( $prefixo ) {
        return "{$prefixo}ClasseConcreta1";
    }
}

class ClasseConcreta2 extends ClasseAbstrata
{
    protected function pegarValor() {
        return "ClasseConcreta2";
    }

    public function valorComPrefixo( $prefixo ) {
        return "{$prefixo}ClasseConcreta2";
    }
}

$classe1 = new ClasseConcreta1;
$classe1->imprimir();
echo $classe1->valorComPrefixo('FOO_') ."\n";

$classe2 = new ClasseConcreta2;
$classe2->imprimir();
echo $classe2->valorComPrefixo('FOO_') ."\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
ConcreteClass1
FOO_ConcreteClass1
ConcreteClass2
FOO_ConcreteClass2
]]>
    </screen>
  </example>

   <para>
    Código antigo que não tem classes ou funções definidas pelo usuário
    como 'abstract' deve ser executado sem modificações.
   </para>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 322136 Maintainer: ae Status: ready --><!-- CREDITS: narigone,felipe -->
 <sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
  <title>Métodos Mágicos</title>
  <para>
   Os nomes de funções
   <link linkend="language.oop5.decon.constructor"><literal>__construct</literal></link>,
   <link linkend="language.oop5.decon.destructor"><literal>__destruct</literal></link>,
   <link linkend="language.oop5.overloading.methods"><literal>__call</literal></link>,
   <link linkend="language.oop5.overloading.methods"><literal>__callStatic</literal></link>,
   <link linkend="language.oop5.overloading.members"><literal>__get</literal></link>,
   <link linkend="language.oop5.overloading.members"><literal>__set</literal></link>,
   <link linkend="language.oop5.overloading.members"><literal>__isset</literal></link>,
   <link linkend="language.oop5.overloading.members"><literal>__unset</literal></link>,
   <link linkend="language.oop5.magic.sleep"><literal>__sleep</literal></link>,
   <link linkend="language.oop5.magic.sleep"><literal>__wakeup</literal></link>,
   <link linkend="language.oop5.magic.tostring"><literal>__toString</literal></link>,
   <link linkend="language.oop5.magic.invoke"><literal>__invoke</literal></link>,
   <link linkend="language.oop5.magic.set-state"><literal>__set_state</literal></link> and
   <link linkend="language.oop5.cloning"><literal>__clone</literal></link>
   são mágicos nas classes do PHP. Você
   não pode ter funções com esses nomes em nenhuma de suas
   classes a não ser que queria que a funcionalidade mágica associada
   com eles.
  </para>

  <caution>
   <simpara>
    PHP reserva todas as funções com nomes começando com __ como mágicas.
    É recomendado que você não use funções com nomes com
    __ no PHP a não ser que você queira alguma funcionalidade mágica documentada.
   </simpara>
  </caution>

  <sect2 xml:id="language.oop5.magic.sleep">
   <title>
    <link linkend="object.sleep">__sleep()</link> e
    <link linkend="object.wakeup">__wakeup()</link>
   </title>

   <methodsynopsis xml:id="object.sleep">
    <modifier>public</modifier> <type>array</type><methodname>__sleep</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.wakeup">
    <type>void</type><methodname>__wakeup</methodname>
    <void/>
   </methodsynopsis>
   
   <para>
    <function>serialize</function> checa se sua classe tem uma função com
    o nome mágico <link linkend="object.sleep">__sleep()</link>. Se tiver, a função é
    executa antes de qualquer serialização. Ela pode limpar o objeto
    e deve retornar um array com os nomes de todas as variáveis
    do objeto que devem ser serializadas. Se o método não retornar nada,
    então &null; é serializada e um
    <constant>E_NOTICE</constant> é disparado.
   </para>
   <note>
    <para>
     Não é possível que <link linkend="object.sleep">__sleep()</link> retorne nomes de
     propriedades privadas da classe ancestral. Isso causará um erro nível
     <constant>E_NOTICE</constant>. Pode-se ser utilizada a interface
     <classname>Serializable</classname> se for o caso.
    </para>
   </note>
   <para>
    O intuito do método <link linkend="object.sleep">__sleep()</link> enviar dados
    pendentes ou realizar tarefas similares de limpeza. Além disso, a função é
    útil se você tiver objetos muito grandes que não precisarão ser
    salvos completamente.
   </para>
   <para>
    Inversamente, <function>unserialize</function> checa pela
    presença da função com o nome mágico
    <link linkend="object.wakeup">__wakeup()</link>. Se achar, essa função pode
    reconstruir qualquer recursos que o objeto pode ter.
   </para>
   <para>
    O intuito do método <link linkend="object.wakeup">__wakeup()</link> é
    reestabelecer qualquer conexão com banco de dados que podem ter sido perdidas
    durante a serialização e realizar tarefas de
    reinicialização.
   </para>
   <example>
    <title>Sleep e wakeup</title>
     <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $server, $username, $password, $db;
    
    public function __construct($server, $username, $password, $db)
    {
        $this->server = $server;
        $this->username = $username;
        $this->password = $password;
        $this->db = $db;
        $this->connect();
    }
    
    private function connect()
    {
        $this->link = mysql_connect($this->server, $this->username, $this->password);
        mysql_select_db($this->db, $this->link);
    }
    
    public function __sleep()
    {
        return array('server', 'username', 'password', 'db');
    }
    
    public function __wakeup()
    {
        $this->connect();
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.tostring">
   <title><link linkend="object.tostring">__toString()</link></title>
   <methodsynopsis xml:id="object.tostring">
    <modifier>public</modifier> <type>string</type><methodname>__toString</methodname>
    <void/>
   </methodsynopsis>
   <para>
    O método <link linkend="object.tostring">__toString()</link> permite que uma classe decida
    como se comportar quando for convertida para uma string. Por exemplo,
    o que <literal>echo $obj;</literal> irá imprimir. Este método precisa
    retornar uma string, senão um erro nível <constant>E_RECOVERABLE_ERROR</constant>
    é gerado.
   </para>
   <example>
    <title>Exemplo Simples</title>
    <programlisting role="php">
<![CDATA[
<?php
// Declare a simple class
class TestClass
{
    public $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    public function __toString()
    {
        return $this->foo;
    }
}

$class = new TestClass('Hello');
echo $class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello
]]>
    </screen>
   </example>
   <para>
    Vale lembrar que antes do PHP 5.2.0 o método <link linkend="object.tostring">__toString()</link>
    só era chamado quando diretamente combinado com
    <function>echo</function> ou <function>print</function>.
    Desde o PHP 5.2.0, ele é chamado no contexto de string (e.g. em 
    <function>printf</function> com modificador <literal>%s</literal>) mas não
    em outros tipos de contextos (e.g. como modificador <literal>%d</literal>).
    Desde o PHP 5.2.0, convertendo objetos sem o método <link linkend="object.tostring">__toString()</link>
    para string causa <constant>E_RECOVERABLE_ERROR</constant>.
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.magic.invoke">
   <title><link linkend="object.invoke">__invoke()</link></title>
   <methodsynopsis xml:id="object.invoke">
    <type>mixed</type><methodname>__invoke</methodname>
    <methodparam choice="opt"><parameter>...</parameter></methodparam>
   </methodsynopsis>
   <para>
    O método <link linkend="object.invoke">__invoke()</link> é chamado quando um script tenta
    chamar um objeto como uma função.
   </para>
   <note>
    <para>
     Esta funcionalidade esta disponível desde o PHP 5.3.0.
    </para>
   </note>
   <example>
    <title>Usando <literal>__invoke</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
class CallableClass
{
    public function __invoke($x)
    {
        var_dump($x);
    }
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(5)
bool(true)
]]>
    </screen>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.magic.set-state">
   <title><link linkend="object.set-state">__set_state()</link></title>
   <methodsynopsis xml:id="object.set-state">
    <modifier>static</modifier> <type>object</type><methodname>__set_state</methodname>
    <methodparam><type>array</type><parameter>properties</parameter></methodparam>
   </methodsynopsis>
   <para>
    Esse método <link linkend="language.oop5.static">estático</link> é chamado
    para classes exportadas por <function>var_export</function> desde PHP 5.1.0.
   </para>
   <para>
    O único parâmetro para esse método é um array contendo propriedades
    exportadas no formato <literal>array('property' => value, ...)</literal>.
   </para>
   <example>
    <title>Usando <link linkend="object.set-state">__set_state()</link> (desde o PHP 5.1.0)</title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array) // As of PHP 5.1.0
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

eval('$b = ' . var_export($a, true) . ';'); // $b = A::__set_state(array(
                                            //    'var1' => 5,
                                            //    'var2' => 'foo',
                                            // ));
var_dump($b);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: fernandoc Status: ready -->
<!-- splitted from ./en/functions/url.xml, last change in rev 1.2 -->
  <refentry xml:id="function.urlencode" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <refnamediv>
    <refname>urlencode</refname>
    <refpurpose>Codifica uma URL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title>
     <methodsynopsis>
      <type>string</type><methodname>urlencode</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
     </methodsynopsis>
    <para>
     Retorna uma string em que todos os caracteres não-alfanuméricos com exceção de
     <literal>-_.</literal> são substituidos com um sinal de porcento
     (<literal>%</literal>) siguido por dois digitos hexadecimais e espaços
     codificados como um sinal de (<literal>+</literal>). É codificada
     do mesmo jeito que dados vindos de um formulário WWW é codificado, isto é,
     da mesma maneira que
     <literal>application/x-www-form-urlencoded</literal>.
     Isto é diferente da codificação RFC1738 (veja
     <function>rawurlencode</function>) nesta por razões historicas,
     espaços são codificados como sinais de mais(+). 
     Esta função é conveniente para codificar uma string que será 
     passada como parte de uma URL, como um meio de passar variáveis
     para a próxima pagina:
     <example>
      <title>Exemplo <function>urlencode</function></title>
      <programlisting role="php">
<![CDATA[
<?php
echo '<a href="mycgi?foo=', urlencode($userinput), '">';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Nota: Seja cuidadoso com variaveis que sejam iguais a entidades HTML.
     Coisas como &amp;amp, &amp;copy e &amp;pound são interpretados pelo
     browser e a entidade atual é usada ao invés do nome de variavel desejado.
     Isto é um problema obvio que o W3C vem falando a todos a anos.
     A referrência esta aqui:
     <link xlink:href="&url.argsep;">&url.argsep;</link>. O PHP
     suporta que se mude o separador de argumentos para o ponto e vírgula
     sugerido pelo W3C através da diretiva de configuração arg_separator.
     Infelizmente a maior parte dos aplicativos não envia os dados neste formato.
     Um meio mais portável é usar &amp;amp; ao invés de
     &amp; como separador. Você não precisa mudar
     arg_separator para isto. Deixe como &amp;, mas simplesmente codifique as 
     suar URLs usando htmlentities(urlencode($data)).
    </para>
    <para>
     <example>
      <title>Exemplo <function>urlencode</function> e <function>htmlentities</function></title>
      <programlisting role="php">
<![CDATA[
<?php
echo '<a href="mycgi?foo=', htmlentities(urlencode($userinput)), '">';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Veja também <function>urldecode</function>,
     <function>htmlentities</function>,
     <function>rawurldecode</function> e
     <function>rawurlencode</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

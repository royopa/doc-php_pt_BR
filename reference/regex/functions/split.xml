<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: felipe Status: ready --><!-- CREDITS: kappu -->
<refentry xml:id="function.split" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>split</refname>
  <refpurpose>Separa strings em array utilizando expressões regulares</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>split</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
  </methodsynopsis>
  <para>
   Separa uma <parameter>string</parameter> em array por expressão regular.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       A expressão regular case sensitive.
      </para>
      <para>
       Se separar caracteres que são consideredos especiais
       para as expressões regulares, será necessário usar o caracter de
       escape primeiramente. Se você pensar que <function>split</function>
       (ou outra função para execução de expressões regulares) é muito
       estranha, por favor leia o arquivo <filename>regex.7</filename>,
       incluido na pasta <filename>regex/</filename> no subdiretório
       da distribuição do PHP. Está no formato manpage e você deverá usar
       o comando <command>man /usr/local/src/regex/regex.7</command>
       para maiores informações.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       A string de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       Se <parameter>limit</parameter> é definido, o array retornado conterá no 
       máximo de <parameter>limit</parameter> elementos, sendo que o último 
       elemento conterá o resto da <parameter>string</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna uma matriz de strings, contendo as substrings de
   <parameter>string</parameter> separadas pelos limites
   descritos na expressão regular <parameter>pattern</parameter>.
  </para>
  <para>
   Se existirem <replaceable>n</replaceable> ocorrências da
   <parameter>pattern</parameter>, será retornado uma matriz (array) contendo
   <literal><replaceable>n</replaceable>+1</literal> items. Por exemplo, se
   não existir uma ocorrência de <parameter>pattern</parameter>, uma matriz com
   um único elemento será retornado. Certamente, isto também é válido se
   <parameter>string</parameter> estiver vazia. Se um erro ocorrer,
   <function>split</function> retorna &false;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo da <function>split</function></title>
    <para>
     Separa os quatro primeiro elementos de uma linha do arquivo
     <filename>/etc/passwd</filename>:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
list($user,$pass,$uid,$gid,$extra) =
    split (":", $passwd_line, 5);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemplo da <function>split</function></title>
    <para>
     Separação de dados delimitados por barras, pontos, ou traços:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Delimitado por barras, pontos ou traços
$data = "04/30/1973";
list ($mes, $dia, $ano) = split ('[/.-]', $data);
echo "Mês: $mes; Dia: $dia; Ano: $ano<br />\n";
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <tip>
   <para>
    <function>preg_split</function>, que usa sintaxe de expressão regular 
    compatível com Perl, é normalmente a rápida alternativa para
    <function>split</function>. Se você não precisa do poder das expressões 
    regulares, é mais eficiente usar <function>explode</function>, que
    não faz overhead como engine de expressão regular.
   </para>
  </tip>
  <tip>
   <para>
    Para visualizar uma emulação do Perl e seus métodos <command>@chars =
    split('', $str)</command>, veja os exemplos da <function>preg_split</function>.
   </para>
  </tip>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_split</function></member>
    <member><function>spliti</function></member>
    <member><function>str_split</function></member>
    <member><function>explode</function></member>
    <member><function>implode</function></member>
    <member><function>chunk_split</function></member>
    <member><function>wordwrap</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

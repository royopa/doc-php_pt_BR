<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 297028 Maintainer: amandavale Status: ready --><!-- CREDITS: lucasr -->
<refentry xml:id="function.array-multisort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_multisort</refname>
  <refpurpose>Ordena múltiplos arrays ou arrays multidimensionais</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_multisort</methodname>
      <methodparam><type>array</type><parameter role="reference">arr</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter><initializer>SORT_ASC</initializer></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter><initializer>SORT_REGULAR</initializer></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_multisort</function> pode ser usada para ordenar
   vários arrays de uma vez, ou um array multidimensional por uma
   ou mais dimensões.
  </para>
  <para>
   Chaves associativas (<type>string</type>) serão mantidas, mas chaves
   númericas serão reindexadas.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>arr</parameter></term>
     <listitem>
      <para>
       Um <type>array</type> a ser ordenado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg</parameter></term>
     <listitem>
      <para>
       Opcionalmente um outro <type>array</type>, ou opções de ordenação para o
       argumento anterior <type>array</type>: 
       <constant>SORT_ASC</constant>, 
       <constant>SORT_DESC</constant>, 
       <constant>SORT_REGULAR</constant>,
       <constant>SORT_NUMERIC</constant>,
       <constant>SORT_STRING</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
       <parameter>arg</parameter>'s adicionais. 
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
  &return.success;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ordenando múltiplos arrays</title>
    <programlisting role="php">
<![CDATA[
<?php
$ar1 = array(10, 100, 100, 0);
$ar2 = array(1, 3, 2, 4);
array_multisort($ar1, $ar2);

var_dump($ar1);
var_dump($ar2);
?>
]]>
      </programlisting>
    <para>
     Nesse exemplo, depois da ordenação, o primeiro array conterá 0, 10,
     100, 100. O segundo conterá 4, 1, 2, 3. As entradas do segundo array
     correspondendo às entradas idênticas como foram ordenadas no primeiro
     array (100 e 100).
    </para>
     <screen>
<![CDATA[
array(4) {
  [0]=> int(0)
  [1]=> int(10)
  [2]=> int(100)
  [3]=> int(100)
}
array(4) {
  [0]=> int(4)
  [1]=> int(1)
  [2]=> int(2)
  [3]=> int(3)
}
]]>
     </screen>
     </example>
    </para>    
    <para>
     <example>
      <title>Ordenando um array multidimensional</title>
      <programlisting role="php">
<![CDATA[
<?php
$ar = array(
    array("10", 11, 100, 100, "a"),
    array(   1,  2, "2",   3,   1)
);
array_multisort($ar[0], SORT_ASC, SORT_STRING,
                 $ar[1], SORT_NUMERIC, SORT_DESC);
var_dump($ar);
?>
]]>
    </programlisting>
    <para>
     Neste exemplo, depois da ordenação, o primeiro array se transformará em
     "10", 100, 100, 11, "a" (ele foi ordenado como strings em ordem ascendente).
     O segundo conterá 1, 3, "2", 2, 1 (ordenados como números,
     em ordem descendente).
    </para>
<screen>
<![CDATA[
array(2) {
    [0]=> array(5) {
    [0]=> string(2) "10"
    [1]=> int(100)
    [2]=> int(100)
    [3]=> int(11)
    [4]=> string(1) "a"
    }
    [1]=> array(5) {
        [0]=> int(1)
        [1]=> int(3)
        [2]=> string(1) "2"
        [3]=> int(2)
        [4]=> int(1)
    }
}
]]>
      </screen>
     </example>
    </para>
    <para>
     <example>
      <title>Ordenando resultados de um banco de dados</title>
      <para>
       Para este exemplo, cada elemento no array <varname>data</varname>
       representa uma linha na tabela. Este tipo de conjunto de dados é
       típico de registros de banco de dados.
      </para>
      <para>
       Dados do Exemplo:
      </para>
      <screen>
<![CDATA[
volume | edition
-------+--------
    67 |       2
    86 |       1
    85 |       6
    98 |       2
    86 |       6
    67 |       7
]]>
     </screen>
     <para>
      Os dados como um array, chamado <varname>data</varname>. Isto seria normalmente,
      por exemplo, obtido por um loop em <function>mysql_fetch_assoc</function>.
     </para>
     <programlisting role="php">
<![CDATA[
<?php
$data[] = array('volume' => 67, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 1);
$data[] = array('volume' => 85, 'edition' => 6);
$data[] = array('volume' => 98, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 6);
$data[] = array('volume' => 67, 'edition' => 7);
?>
]]>
     </programlisting>
     <para>
      Neste exemplo, ordenaremos por <varname>volume</varname> descendente,
      <varname>edition</varname> ascendente.
     </para>
     <para>
      Nós temos uma matriz de linhas, mas <function>array_multisort</function>
      requer uma matriz de colunas, assim nós usamos o código abaixo para obter
      colunas e então realizar o ordenamento.
     </para>
    <programlisting role="php">
<![CDATA[
<?php
// Obter uma lista de colunas
foreach ($data as $key => $row) {
    $volume[$key]  = $row['volume'];
    $edition[$key] = $row['edition'];
}

// Ordena os dados com volume descendente, edition ascendente
// adiciona $data como o último parãmetro, para ordenar pela chave comum
array_multisort($volume, SORT_DESC, $edition, SORT_ASC, $data);
?>
]]>
    </programlisting>
    <para>
     O conjunto de dados agora está ordenado e será parecido com isto:
    </para>
    <screen>
<![CDATA[
volume | edition
-------+--------
    98 |       2
    86 |       1
    86 |       6
    85 |       6
    67 |       2
    67 |       7
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
   <title>Ordenar sem diferenciar maiúsculas e minúsculas</title>
    <para>
     Ambas <constant>SORT_STRING</constant> e
     <constant>SORT_REGULAR</constant> diferenciam maiúsculas e minúsculas, strings
     começando com uma letra maiúscula virão antes de uma
     string começando com uma letra minúscula.
    </para>
    <para>
     Para ordenar sem diferenciar maiúsculas e minúsculas, force a ordem da ordenação
     para que seja determinada por uma cópia em letras minúsculas da matriz original.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$array = array('Alpha', 'atomic', 'Beta', 'bank');
$array_lowercase = array_map('strtolower', $array);

array_multisort($array_lowercase, SORT_ASC, SORT_STRING, $array);

print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Alpha
    [1] => atomic
    [2] => bank
    [3] => Beta
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>usort</function></member>
    <member>&seealso.array.sorting;</member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
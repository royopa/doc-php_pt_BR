<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 297028 Maintainer: narigone Status: ready -->
<refentry xml:id="function.token-get-all" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>token_get_all</refname>
  <refpurpose>Divide um dado fonte em tokens do PHP</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>token_get_all</methodname>
   <methodparam><type>string</type><parameter>source</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>token_get_all</function> avalia do o fonte <parameter>source</parameter>
   em tokens da linguagem PHP usando o avaliador léxico do Zend engine.
  </para>
  <para>
   Para uma lista dos tokens do avaliador, veja <xref linkend="tokens"/>, ou use
   <function>token_name</function> para traduzir um valor de um token para sua
   representação em formato string.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>source</parameter></term>
     <listitem>
      <para>
       O código-fonte do PHP à ser avaliado.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Um array de identificadores de tokens. Cada identificador de token individual ou é um
   caracter único (ex.: <literal>;</literal>, <literal>.</literal>,
   <literal>&gt;</literal>, <literal>!</literal>, etc...),
   ou um array com três elementos contendo o índice do token no elemento 0, a string
   contendo o token original no elemento 1 e o número da linha no elemento 2.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo de uso de <function>token_get_all</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$tokens = token_get_all('<?php'); // => array(array(T_OPEN_TAG, '<?'));
$tokens = token_get_all('<?php echo; ?>'); /* => array(
                                                  array(T_OPEN_TAG, '<?php'),
                                                  array(T_ECHO, 'echo'),
                                                  ';',
                                                  array(T_CLOSE_TAG, '?>') ); */
/* Note no exemplo a seguir que a string é avaliada com T_INLINE_HTML
   ao invés de esperado T_COMMENT (T_ML_COMMENT no PHP <5).
   Isso é porque nenhuma tag de abertura/fechamento foi usada no "código" provido.
   Isso seria equivalente a coloar comentários fora das tags <?php ?> em um arquivo normal. */
$tokens = token_get_all('/* comment */'); // => array(array(T_INLINE_HTML, '/* comment */'));
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.2</entry>
       <entry>Números de linha são retornados no elemento 2
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

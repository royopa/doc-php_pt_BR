<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 331700 Maintainer: ae Status: ready Credits: felipe -->

<appendix xml:id="json.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  As seguintes constantes indicam o tipo de erro retornado pela
  função <function>json_last_error</function>.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-error-none">
   <term>
    <constant>JSON_ERROR_NONE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Sem erros.
     Disponível desde o PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-depth">
   <term>
    <constant>JSON_ERROR_DEPTH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     O limite de pilha de chamadas foi ultrapassado
     Disponível desde o PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-state-mismatch">
   <term>
    <constant>JSON_ERROR_STATE_MISMATCH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Ocorre em underflows ou com incongruência de modos.
     Disponível desde o PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-ctrl-char">
   <term>
    <constant>JSON_ERROR_CTRL_CHAR</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Erro de controle de caracteres, possivelmente erro de enconding.
     Disponível desde o PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-syntax">
   <term>
    <constant>JSON_ERROR_SYNTAX</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Erro de sintaxe.
     Disponível desde o PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-utf8">
   <term>
    <constant>JSON_ERROR_UTF8</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Caracteres UTF-8 mal formados, possivelmente erro de enconding. Esta
     constante está disponível desde o PHP 5.3.3.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-recursion">
   <term>
    <constant>JSON_ERROR_RECURSION</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <para>
     O objeto ou array passado para <function>json_encode</function> inclui
     referências recursivas, e não pode ser formatada.
     Se a opção <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> foi
     informada, &null; será substituido no lugar da referência recursiva.
    </para>
    <para>
     Esta constante está disponível desde o PHP 5.5.0.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-inf-or-nan">
   <term>
    <constant>JSON_ERROR_INF_OR_NAN</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <para>
     Um valor passado para <function>json_encode</function> inclui
     <link linkend="language.types.float.nan"><constant>NAN</constant></link>
     ou <link linkend="function.is-infinite"><constant>INF</constant></link>.
     Se a opção <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> foi
     informada, <literal>0</literal> será substituído no lugar do número
     especial.
    </para>
    <para>
     Esta constante está disponível desde o PHP 5.5.0.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-unsupported-type">
   <term>
    <constant>JSON_ERROR_UNSUPPORTED_TYPE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <para>
     Um valor de um tipo não suportado foi informado para
     <function>json_encode</function>, por exemplo um <type>resource</type>.
     Se a opção <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> foi
     informada, &null; será substitui ao invés do valor não suportado.
    </para>
    <para>
     Esta constante está disponível desde o PHP 5.5.0.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  As seguintes constantes podem ser combinadas para formar opções para a função
  <function>json_encode</function>.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-hex-tag">
   <term>
    <constant>JSON_HEX_TAG</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todos os caracteres &lt; e &gt; serão convertidos para \u003C and \u003E.
     Disponível desde o PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-amp">
   <term>
    <constant>JSON_HEX_AMP</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todos os caracteres &amp; serão convertidos para \u0026.
     Disponível desde o PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-apos">
   <term>
    <constant>JSON_HEX_APOS</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todos os caracteres ' serão convertidos para \u0027.
     Disponível desde o PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-quot">
   <term>
    <constant>JSON_HEX_QUOT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todos os caracteres " serão convertidos para \u0022.
     Disponível desde o PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-force-object">
   <term>
    <constant>JSON_FORCE_OBJECT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Imprime um objeto em vez de um array quando um array não recursivo é
     usado. Muito útil quando o chamador espera
     um objeto mas o array está vazio.
     Disponível desde o PHP 5.3.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-numeric-check">
   <term>
    <constant>JSON_NUMERIC_CHECK</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Codifica strings numéricas como números.
     Disponível desdee o PHP 5.3.3.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-bigint-as-string">
   <term>
    <constant>JSON_BIGINT_AS_STRING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Codifica números grandes como seu valor string original.
     Disponível desde o PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-pretty-print">
   <term>
    <constant>JSON_PRETTY_PRINT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Formata os dados retornados com espaços em branco.
     Disponível desde PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-slashes">
   <term>
    <constant>JSON_UNESCAPED_SLASHES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Não escapa o caracter <literal>/</literal>.
     Disponível desde o PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-unicode">
   <term>
    <constant>JSON_UNESCAPED_UNICODE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Codifica caracteres Unicode multibyte literalmente (default é formatar como \uXXXX).
     Disponível desde o PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->


<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 297028 Maintainer: felipe Status: ready -->
<refentry xml:id="function.debug-zval-dump" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>debug_zval_dump</refname>
  <refpurpose>Exibe a representação de um interno zend value</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>debug_zval_dump</methodname>
   <methodparam><type>mixed</type><parameter>variable</parameter></methodparam>
  </methodsynopsis>
  <para>
   Exibe a representação de um interno zend value.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>variable</parameter></term>
     <listitem>
      <para>
       A variável a ser avaliada.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplo da <function>debug_zval_dump</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';
$var2 = '';

$var2 =& $var1;

debug_zval_dump(&$var1);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
&string(11) "Hello World" refcount(3)
]]>
    </screen>
   </example>
  </para>
  <note>
   <title>Cuidado com o <literal>refcount</literal></title>
   <para>
    O valor <literal>refcount</literal> retornado por esta função
    não é óbvio em certas circunstâncias. Por exemplo, um desenvolvedor
    espera que o exemplo acima indique um <literal>refcount</literal> de
    <literal>2</literal>. A terceira referência é criada quando
    <function>debug_zval_dump</function> é chamada.
   </para>
   <para>
    Este comportamento ocorre quando uma variável não passada para
    <function>debug_zval_dump</function> por referência. Para ilustrar, veja
    a pequena modificação do exemplo acima:
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';
$var2 = '';

$var2 =& $var1;

debug_zval_dump($var1); // not passed by reference, this time
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hello World" refcount(1)
]]>
     </screen>
    </example>
   </para>
   <para>
    Por quê <literal>refcount(1)</literal>? Por causa da cópia da <literal>$var1</literal> ser
    feita, quando a função é chamada.
   </para>
   <para>
    Esta função se torna <emphasis>muita</emphasis> confusa quando uma
    variável com um <literal>refcount</literal> de <literal>1</literal> é
    passado (por cópia/valor):
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';

debug_zval_dump($var1);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hello World" refcount(2)
]]>
     </screen>
    </example>
   </para>
   <para>
    O <literal>refcount</literal> de <literal>2</literal>, aqui, é extremamente
    não óbvio. Especialmente considerando os exemplos acima. Então o quê
    acontece?
   </para>
   <para>
    Quando uma variável tem uma única referência (com faz <literal>$var1</literal>
    antes de ser usada como um argumento para <function>debug_zval_dump</function>),
    a engine do PHP otimiza em que ela é passada para uma função.
    Internalmente, PHP trata <literal>$var1</literal> como uma referência (em que
    o <literal>refcount</literal> é aumentado para o escopo desta
    função), com um aviso que <emphasis>se</emphasis> passado referência
    pode ser reescrito para, um cópia feita, mas somente no momento de escrita.
    Isto é conhecido como "cópia na escrita."
   </para>
   <para>
    Então, se <function>debug_zval_dump</function> precisa escrever para o único
    parãmetro (e ele não faz), então uma cópia pode ser feita. Desde então, a
    referência para o parâmetro é mantida, fazendo com que o <literal>refcount</literal>
    seja incrementado para <literal>2</literal> para o escopo da chamada da função.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>var_dump</function></member>
    <member><function>debug_backtrace</function></member>
    <member><link linkend="language.references">Explicação sobre Referências</link></member>
    <member><link xlink:href="&url.derick.references;">Explicação sobre Referências (por Derick Rethans)</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

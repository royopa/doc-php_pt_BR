<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: fernandoc Status: ready -->
<!-- splitted from ./en/functions/exec.xml, last change in rev 1.28 -->
  <refentry xml:id='function.proc-open' xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>proc_open</refname>
    <refpurpose>
     Executa um comando e abre ponteiros para entrada e saída
    </refpurpose>
   </refnamediv>
   <refsect1 role="description">
    &reftitle.description;
     <methodsynopsis>
      <type>resource</type><methodname>proc_open</methodname>
      <methodparam><type>string</type><parameter>cmd</parameter></methodparam>
      <methodparam><type>array</type><parameter>descriptorspec</parameter></methodparam>
      <methodparam><type>array</type><parameter role="reference">pipes</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>cwd</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>env</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>other_options</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>proc_open</function> é similar a <function>popen</function>
     mas provê uma grau de controle muito maior sobre a execução do programa.
    </para>

<!-- ptys are currently disabled in the sources
    <para>
     PHP 5 introduces pty support for systems with Unix98 ptys. This allows
     your script to interact with applications that expect to be talking to a
     terminal.  A pty works like a pipe, but is bi-directional, so there is no
     need to specify a read/write mode.  The example below shows how to use a
     pty; note that you don't have to have all descriptors talking to a pty.
     Also note that only one pty is created, even though pty is specified 3
     times.  In a future version of PHP, it might be possible to do more than
     just read and write to the pty.
    </para>
-->

   </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>cmd</parameter></term>
     <listitem>
      <para>
       O comando a executar
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>descriptorspec</parameter></term>
     <listitem>
      <para>
       Uma matriz indexada aonde a chave representa o número do descritor e o 
       valor representa como o PHP passará este descritor para o processo
       filho. 0 é stdin, 1 é stdout, enquanto 2 é stderr.
      </para>
      <para>
       Os pipes suportados atualmente são <literal>file</literal> e
       <literal>pipe</literal> <!-- and <literal>pty</literal>-->.
      </para>
      <para>
       Os números dos descritores de arquivos não estão limitados a 0, 1 e 2 - você pode
       especificar qualquer número de descritor válido e ele será passado para o 
       processo filho. Isto permiteao seu script interoperar com outros scripts
       que sejam executados como "co-processos". Em particular, isto é útil para
       passar senhas para programas como PGP, GPG e openssl de uma maneira
       mais segura. Também é útil para ler informações do estado
       providos por esses programas em descritores auxiliares.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>pipes</parameter></term>
     <listitem>
      <para>
       Sera definido como uma matriz indexada de ponteiros de arquivos que corresponde
       aos pipes do lado do PHP que são criados.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cwd</parameter></term>
     <listitem>
      <para>
       O diretório inicial de trabalho para o comando. Este deve ser um
       caminho <emphasis role="strong">absoluto</emphasis>, ou &null;
       se você quer usar o valor padrão (o diretório de trabalho do processo
       PHP atual)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>env</parameter></term>
     <listitem>
      <para>
       Uma matriz de variáveis de ambiênte para o comando que será executado,
       ou &null; para usar o mesmo ambiênte que o processo PHP atual.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>other_options</parameter></term>
     <listitem>
      <para>
       Permite a você definir opções adicionais. Opções atualmente suportadas
       incluem:
       <simplelist>
        <member>
         <literal>suppress_errors</literal> (apenas windows): suprime os erros
         gerados por esta função quando estiver definido como &true;
        </member>
        <member>
         <literal>bypass_shell</literal> (apenas windows): ignora o shell
         <literal>cmd.exe</literal> quando esta definido como &true;
        </member>
        <member>
         <literal>context</literal>: contexto de stream usado ao abrir arquivos
         (criado com <function>stream_context_create</function>)
        </member>
        <member>
         <literal>binary_pipes</literal>: abre os pipes em modo binário, ao invés de
         usar o <literal>stream_encoding</literal>
        </member>
       </simplelist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um recurso representando o processo, o qual deve ser liberado usando
   <function>proc_close</function> quando você terminou de utiliza-lo. Em caso de falha
   retorna &false;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>6.0.0</entry>
       <entry>
        Adicionado as opções <literal>context</literal> e
        <literal>binary_pipes</literal> no parâmetro
        <parameter>other_options</parameter>.
       </entry>
      </row>
      <row>
       <entry>5.2.1</entry>
       <entry>
        Adicionada a opção <literal>bypass_shell</literal> ao parâmetro
        <parameter>other_options</parameter>.
       </entry>
      </row>
      <row>
       <entry>5.0.0</entry>
       <entry>
        Adicionado os parâmetros <parameter>cwd</parameter>, <parameter>env</parameter> e
        <parameter>other_options</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Um exemplo <function>proc_open</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$descriptorspec = array(
   0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
   1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
   2 => array("file", "/tmp/error-output.txt", "a") // stderr is a file to write to
);

$cwd = '/tmp';
$env = array('some_option' => 'aeiou');

$process = proc_open('php', $descriptorspec, $pipes, $cwd, $env);

if (is_resource($process)) {
    // $pipes now looks like this:
    // 0 => writeable handle connected to child stdin
    // 1 => readable handle connected to child stdout
    // Any error output will be appended to /tmp/error-output.txt

    fwrite($pipes[0], '<?php print_r($_ENV); ?>');
    fclose($pipes[0]);

    echo stream_get_contents($pipes[1]);
    fclose($pipes[1]);

    // It is important that you close any pipes before calling
    // proc_close in order to avoid a deadlock
    $return_value = proc_close($process);

    echo "command returned $return_value\n";
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array
(
    [some_option] => aeiou
    [PWD] => /tmp
    [SHLVL] => 1
    [_] => /usr/local/bin/php
)
command returned 0
]]>
    </screen>
   </example>
  </para>

<!-- ptys are currently disabled
  <para>
   <example>
    <title>ptys usage</title>
    <programlisting role="php">
<![CDATA[
<?php
// Create a pseudo terminal for the child process
$descriptorspec = array(
   0 => array("pty"),
   1 => array("pty"),
   2 => array("pty")
);
$process = proc_open("cvs -d:pserver:cvsread@cvs.php.net:/repository login", $descriptorspec, $pipes);
if (is_resource($process)) {
   // work with it here
}
?>
]]>
    </programlisting>
   </example>
  </para>
-->

 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Compatibilidade com Windows: Descritores além do 2(stderr) são tornados disponíveis ao
    processo filho como manipuladores herdados, mas já que a arquitetura Windows
    não associa números de descritores de arquivos com os manipuladores de baixo nível,
    o processo filho (ainda) não tem meios de acessar estes manipuladores.
    Stdin, stdout e stderr funcionam como esperado.
   </para>
  </note>
  <note>
   <para>
    Se você precisa de um pipe de processo de apenas uma direção, use
   <function>popen</function> ao invés, já que é muito mais fácil de usar.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>popen</function></member>
    <member><function>exec</function></member>
    <member><function>system</function></member>
    <member><function>passthru</function></member>
    <member><function>stream_select</function></member>
    <member>O <link linkend="language.operators.execution">operador backtick</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: fernandoc Status: ready -->
<!-- splitted from ./en/functions/sybase.xml, last change in rev 1.2 -->
  <refentry xml:id="function.sybase-fetch-array" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>sybase_fetch_array</refname>
    <refpurpose>Obtém uma linha como uma matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrição</title> 
     <methodsynopsis>
      <type>array</type><methodname>sybase_fetch_array</methodname>
      <methodparam><type>resource</type><parameter>result</parameter></methodparam>
     </methodsynopsis>
    <para>
     Retorna uma matriz que corresponde a linha obtida, ou
     &false; se não houverem mais linhas.
    </para>
    <para>
     <function>sybase_fetch_array</function> é uma versão extendida de 
     <function>sybase_fetch_row</function>. Além de guardar os
     dados em índices numericos na matriz resultante, também guarda
     os dados em índices associativos, usando os nomes dos campos como chaves.
    </para>
    <para>
     Algo importante para notar é que usar
     <function>sybase_fetch_array</function> NÃO é significativamente
     mais lento do que usar <function>sybase_fetch_row</function>, enquanto
     provê um valor adicional significante.
    </para>
    <note>
     <para> 
      Quando estiver selecionando campos com nomes identicos (por exemplo, em
      um join), os índices associativos terão um número sequencial adicionado.
      Veja o exemplo para detalhes.
     </para>
    </note>
    <para>
     <example>
      <title>Nomes de campos identicos</title>
      <programlisting role="php">
<![CDATA[
<?php
    $dbh = sybase_connect('SYBASE', '', '');
    $q = sybase_query('SELECT * FROM p, a WHERE p.person_id= a.person_id');
    var_dump(sybase_fetch_array($q));
    sybase_close($dbh);
?>
]]>
      </programlisting>
      <para>
       O exemplo acima deve produzir a seguinte saída (assumindo que as duas tabelas apenas
       tenham uma coluna chamada "person_id" em cada uma):
      </para>
      <screen>
<![CDATA[
array(4) {
  [0]=>
  int(1)
  ["person_id"]=>
  int(1)
  [1]=>
  int(1)
  ["person_id1"]=>
  int(1)
}
]]>
      </screen>
     </example>
    </para>
    <para>
     Veja também
     <function>sybase_fetch_row</function>,
     <function>sybase_fetch_assoc</function> e
     <function>sybase_fetch_object</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

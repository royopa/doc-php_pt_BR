<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 320551 Maintainer: rafa Status: ready -->
<refentry xml:id='function.simplexml-load-file' xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>simplexml_load_file</refname>
  <refpurpose>
   Interpreta um arquivo XML e o transforma em um objeto
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>SimpleXMLElement</type><methodname>simplexml_load_file</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>class_name</parameter><initializer>"SimpleXMLElement"</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>ns</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>is_prefix</parameter><initializer>false</initializer></methodparam>
  </methodsynopsis>
  <para>
   Converte o documento XML bem-formado no arquivo indicado em um objeto.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Caminho para o arquivo XML
      </para>
      <note>
       <para>
        Libxml 2 desescapa a URI, por exemplo: para chamar
        <literal>b&amp;c</literal> como um parâmetro <literal>a</literal> da URI,
        você deve chamar
        <literal>simplexml_load_file(rawurlencode('http://example.com/?a=' .
        urlencode('b&amp;c')))</literal>. A partir do PHP 5.1.0 não é mais
        necessário fazer isso, porque o PHP o fará automaticamente.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>class_name</parameter></term>
     <listitem>
      <para>
       É possível utilizar o parâmetro opcional
       <function>simplexml_load_file</function> para retornar um objeto da
       classe especificada. Esta classe deve estender 
       <type>SimpleXMLElement</type>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Desde o PHP 5.1.0 e da Libxml 2.6.0, é possível utilizar o parâmetro
       <parameter>options</parameter> para especificar <link
       linkend="libxml.constants">parâmetros adicionais da Libxml</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ns</parameter></term>
     <listitem>
      <para>
       Prefixo ou URI do namespace.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>is_prefix</parameter></term>
     <listitem>
      <para>
       &true; se <parameter>ns</parameter> for um prefixo, &false; se for URI;
       o padrão é &false;.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna um <type>objeto</type> da classe <type>SimpleXMLElement</type> com
   propriedades contendo os dados do documento XML,&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Produz uma mensagem de erro <constant>E_WARNING</constant> para cada erro
   encontrado nos dados XML.
  </para>
  <tip>
   <para>
    Utilize <function>libxml_use_internal_errors</function> para suprimir todos os
    erros XML e <function>libxml_get_errors</function> para iterar sobre eles
    mais tarde.
   </para>
  </tip>
 </refsect1><!-- }}} -->
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Interpreta um documento XML</title>
    <programlisting role="php">
<![CDATA[
<?php
// O arquivo test.xml contém um documento XML com um elemento root
// e ao menos um elemento /[root]/title.

if (file_exists('test.xml')) {
    $xml = simplexml_load_file('test.xml');
 
    print_r($xml);
} else {
    exit('Falha ao abrir test.xml.');
}
?>
]]>
    </programlisting>
    <para>
     Este script mostrará, em caso de sucesso:
    </para>
    <screen>
<![CDATA[
SimpleXMLElement Object
(
  [title] => Example Title
  ...
)
]]>
    </screen>
    <simpara>
     Nesse ponto já é possível utilizar <literal>$xml->title</literal>
     e quaisquer outros elementos.
    </simpara>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>simplexml_load_string</function></member>
    <member><methodname>SimpleXMLElement::__construct</methodname></member>
    <member><xref linkend="simplexml.examples-errors" /></member>
    <member><function>libxml_use_internal_errors</function></member>
    <member><xref linkend="simplexml.examples-basic"/></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

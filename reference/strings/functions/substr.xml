<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: fernandoc Status: ready -->
<refentry xml:id="function.substr" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>substr</refname>
  <refpurpose>Retorna uma parte de uma string</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>substr</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>int</type><parameter>start</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter></methodparam>
  </methodsynopsis>
  <para>
   Retorna a parte de <parameter>string</parameter> especificada pelo 
   parâmetro <parameter>start</parameter> e <parameter>length</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       A string de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>start</parameter></term>
     <listitem>
      <para>
       Se <parameter>start</parameter> não for negativo, a string retornada iniciará
       na posição <parameter>start</parameter> em
       <parameter>string</parameter>, começando em zero. Por exemplo,
       na string '<literal>abcdef</literal>', o caractere na posição
       <literal>0</literal> é '<literal>a</literal>', o
       caractere na posição <literal>2</literal> é
       '<literal>c</literal>', e assim em diante.
      </para>
      <para>
       Se <parameter>start</parameter> for negativo, a string retornada
       irá começar no caractere <parameter>start</parameter>
       a partir do fim de <parameter>string</parameter>.
      </para>
      <para>
       <example>
        <title>Usando um início negativo</title>
        <programlisting role="php">
<![CDATA[
<?php
$rest = substr("abcdef", -1);    // retorna "f"
$rest = substr("abcdef", -2);    // retorna "ef"
$rest = substr("abcdef", -3, 1); // retorna "d"
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       Se <parameter>length</parameter> for dado e for positivo,
       a string retornada irá conter <parameter>length</parameter> caracteres
       começando em <parameter>start</parameter> (dependendo do tamanho de
       <parameter>string</parameter>). Se a <parameter>string</parameter> é menor do
       que <parameter>start</parameter>, será retornado &false;.
      </para>
      <para>
       Se <parameter>length</parameter> for dado e for negativo, então esta quantidade
       caracteres serão omitidos do final de <parameter>string</parameter>
       (após a posicão de inicio ter sido calculada quando
       <parameter>start</parameter> for negativo). Se
       <parameter>start</parameter> denota uma posição além da truncagem,
       uma string vazia será retornada.
      </para>
      <example>
       <title>Usando um <parameter>length</parameter> negativo</title>
       <programlisting role="php">
<![CDATA[
<?php
$rest = substr("abcdef", 0, -1);  // retorna "abcde"
$rest = substr("abcdef", 2, -1);  // retorna "cde"
$rest = substr("abcdef", 4, -4);  // retorna ""
$rest = substr("abcdef", -3, -1); // retorna "de"
?>
]]>
       </programlisting>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna a parte extraída da string.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Uso básico da <function>substr</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// Accessing single characters in a string
// can also be achived using "curly braces"
$string = 'abcdef';
echo $string{0};                 // a
echo $string{3};                 // d
echo $string{strlen($string)-1}; // f

?>
]]>
    </programlisting>
   </example>   
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>strrchr</function></member>
    <member><function>substr_replace</function></member>
    <member><function>preg_match</function></member>
    <member><function>trim</function></member>
    <member><function>mb_substr</function></member>
    <member><function>wordwrap</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

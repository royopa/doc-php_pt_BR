<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 300233 Maintainer: narigone Status: ready -->
<!-- Reviewed: yes Maintainer: thiago -->
 <chapter xml:id="faq.languages" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>O PHP e as outras linguagens</title>
  <titleabbrev>PHP e outras linguagens</titleabbrev>

  <para>
   PHP é a melhor linguagem para programar para web,
   mas e as outras linguagens?
  </para>

   <qandaset>
   <qandaentry xml:id="faq.languages.asp">
    <question>
     <para>PHP versus. ASP?</para>
    </question>
    <answer>
     <para>
      ASP não é realmente uma linguagem em sí, mas um acrônico para Active
      Server Pages; as linguages atuais usadas para programar ASP incluem
      Visual Basic Script, JScript, e C#, entre outras. A grande
      desvantagem do ASP é que é um sistema proprietário que é nativamente
      usado apenas no Microsoft Internet Information Server (IIS).
      Isto limita a disponibilidade para servidores Win32. Existem vários 
      projetos em progresso que permitem ao ASP funcionar com
      outros ambiêntes e servidores web:
      <link xlink:href="&url.instantasp;">InstantASP</link>
      de <link xlink:href="&url.halcyon;">Halcyon</link> (comercial),
      Chili!Soft ASP de 
      <link xlink:href="&url.chilisoft;">Chili!Soft</link> (comercial), e
      <link xlink:href="&url.mono;">Mono</link> (open-source).
      Fala-se que o ASP é uma linguagem mais lenta e problematica que o PHP, 
      com menor estabilidade geral. Um dos pontos a favor do ASP é que, como ele
      usa principalmente VBScript, é relativamente fácil escolher a 
      linguagem se você já tem conhecimentos de Visual Basic. O suporte a ASP
      já esta ativo por padrão no IIS, fazendo com que seja fácil executa-lo.
      Entretanto, os componentes embutidos no ASP são relativamente limitados, assim se
      você necessita fazer algo mais "avançado" (como interagir com um servidor FTP),
      você necessitára comprar componentes adicionais.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.coldfusion">
    <question>
     <para>PHP versus ColdFusion?</para>
    </question>
    <answer>
     <para>
      PHP é normalmente dito ser mais rápido e eficiente para tarefas de 
      programação complexa e para tentar novas idéias, e é considerado por
      muito mais estável e utiliza menos recursos. Enquanto ColdFusion
      uma vez teve gerenciamento de erros melhor, abstração de banco de dados, e interpretação de datas,
      as questões da abstração de banco de dados foram corrijidas no PHP 4. Uma
      qualidade particular que é listada como uma das forças do ColdFusion
      é sua excelente ferramenta de pesquisa, mas vários argumentos fortes sugerem
      que uma ferramenta de pesquisa não é algo que deva ser incluído em uma linguagem de
      script para a web. Além disso, PHP roda em praticamente todas
      as plataformas modernas existentes, emquanto Cold Fusion esta disponível apenas em Windows, Solaris,
      Linux, MacOS, e AIX. Cold Fusion tem um bom IDE e é geralmente mais
      rápido para novos programadores obterem resultados para aplicações
      muito simples, enquanto PHP requer mais conhecimento de programação.
      Cold Fusion é projetado para não programadores, enquanto
      o PHP é focado em programadores.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.perl">
    <question>
     <para>PHP vs. Perl?</para>
    </question>
    <answer>
     <para>
      A grande vantagem do PHP sobre o Perl, é que o PHP foi projetado para
      fazer scripts para a web, enquanto o Perl foi criado para fazer muito mais.
      Por causa disso, Perl pode ficar muito complicado. A flexibilidade /
      complexidade do Perl pode faze-lo difícil para desenvolvedores
      de diferentes níveis de abilidade colaborarem. PHP tem um formato menos confuso
      e estrito sem perder a flexibilidade. PHP também é mais fácil de integrar no HTML
      do que o Perl. Em grande parte, PHP tem toda a "boa" funcionalidade
      do Perl - construtores, sintaxe, etc - sem faze-lo
      tão complicado quanto o Perl pode ser. Assim o interpretador de
      linha de comando (CLI) do PHP é poderoso o suficiente para realizar tarefas de alto nível
      da mesma maneira que o Perl é tradicionalmente empregado. Perl é um
      linguagem muito testada e verdadeira, e tem o seu chão desde 1980, mas o PHP
      amadureceu e evoluiu rapidamente, e continua a fazer progressos fantastico.
     </para>
    </answer>
   </qandaentry>

  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
